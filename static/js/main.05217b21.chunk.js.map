{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api/api.ts","App.tsx","index.tsx"],"names":["TodoList","state","todoTitle","status","handleSearch","event","setState","target","value","getFilteredTodo","filteredByTitle","props","todos","filter","todo","title","includes","completed","handleSelectChange","selectUser","this","filteredTodos","className","type","onChange","map","htmlFor","readOnly","checked","id","onClick","userId","React","Component","CurrentUser","user","a","loadData","fetch","then","response","json","clearState","name","email","phone","App","selectedUserId","clearSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.05217b21.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n};\n\ntype State = {\n  todoTitle: string,\n  status: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todoTitle: '',\n    status: 'all',\n  };\n\n  handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ todoTitle: event.target.value });\n  };\n\n  getFilteredTodo = (): Todo[] => {\n    const filteredByTitle = this.props.todos\n      .filter(todo => todo.title.includes(this.state.todoTitle));\n\n    switch (this.state.status) {\n      case 'active':\n        return filteredByTitle.filter(todo => !todo.completed);\n      case 'completed':\n        return filteredByTitle.filter(todo => todo.completed);\n      default:\n        return filteredByTitle;\n    }\n  };\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ status: event.target.value });\n  };\n\n  render() {\n    const { selectUser } = this.props;\n    const { todoTitle, status } = this.state;\n    const filteredTodos = this.getFilteredTodo();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          className=\"input\"\n          value={todoTitle}\n          onChange={this.handleSearch}\n        />\n        <select\n          value={status}\n          onChange={this.handleSelectChange}\n          className=\"select is-link m-3\"\n        >\n          <option value=\"all\">Show all</option>\n          <option value=\"completed\">Show completed</option>\n          <option value=\"active\">Show active</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                className=\"TodoList__item\"\n                key={todo.id}\n              >\n                <label htmlFor=\"todo\">\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    id=\"todo\"\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getUsers } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearState: () => void,\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.loadData();\n  }\n\n  async componentDidUpdate(props: Props) {\n    if (props.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUsers(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearState } = this.props;\n\n    if (!user) {\n      return 'User is not chosen';\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={clearState}\n        >\n          Clear\n        </button>\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n      </div>\n    );\n  }\n}\n","const todosUrl = 'https://mate.academy/students-api/todos';\nconst usersUrl = 'https://mate.academy/students-api/users/';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return (fetch(todosUrl).then(response => response.json()));\n};\n\nexport const getUsers = (userId: number): Promise<User> => {\n  return fetch(`${usersUrl}${userId}`).then(response => response.json());\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearState={this.clearSelectedUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}